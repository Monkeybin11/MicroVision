// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Services {

  /// <summary>Holder for reflection information generated from CameraService.proto</summary>
  public static partial class CameraServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for CameraService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNDYW1lcmFTZXJ2aWNlLnByb3RvEghTZXJ2aWNlcxobZ29vZ2xlL3Byb3Rv",
            "YnVmL2VtcHR5LnByb3RvGgtFcnJvci5wcm90byJMChtWaW1iYUluc3RhbmNl",
            "Q29udHJvbFJlcXVlc3QSLQoHY29tbWFuZBgBIAEoDjIcLlNlcnZpY2VzLkNv",
            "bm5lY3Rpb25Db21tYW5kcyJRChxWaW1iYUluc3RhbmNlQ29udHJvbFJlc3Bv",
            "bnNlEh4KBWVycm9yGAEgASgLMg8uU2VydmljZXMuRXJyb3ISEQoJaXNTdGFy",
            "dGVkGAIgASgIIhMKEUNhbWVyYUxpc3RSZXF1ZXN0IkgKEkNhbWVyYUxpc3RS",
            "ZXNwb25zZRIeCgVlcnJvchgBIAEoCzIPLlNlcnZpY2VzLkVycm9yEhIKCmNh",
            "bWVyYUxpc3QYAiADKAkiWgoXQ2FtZXJhQ29ubmVjdGlvblJlcXVlc3QSEAoI",
            "Y2FtZXJhSUQYASABKAkSLQoHY29tbWFuZBgCIAEoDjIcLlNlcnZpY2VzLkNv",
            "bm5lY3Rpb25Db21tYW5kcyJPChhDYW1lcmFDb25uZWN0aW9uUmVzcG9uc2US",
            "HgoFZXJyb3IYASABKAsyDy5TZXJ2aWNlcy5FcnJvchITCgtpc0Nvbm5lY3Rl",
            "ZBgCIAEoCCLxAgoQQ2FtZXJhUGFyYW1ldGVycxIUCgxleHBvc3VyZVRpbWUY",
            "ASABKAESEQoJZnJhbWVSYXRlGAIgASgBEgwKBGdhaW4YAyABKAESRAoTdHJp",
            "Z2dlckxpbmVTZWxlY3RvchgEIAEoDjInLlNlcnZpY2VzLkNhbWVyYVBhcmFt",
            "ZXRlcnMuTGluZVNlbGVjdG9yEhsKE3RyaWdnZXJMaW5lSW52ZXJ0ZXIYBSAB",
            "KAgSQAoRdHJpZ2dlckxpbmVTb3VyY2UYBiABKA4yJS5TZXJ2aWNlcy5DYW1l",
            "cmFQYXJhbWV0ZXJzLkxpbmVTb3VyY2USEQoJbnVtRnJhbWVzGAcgASgFIjoK",
            "DExpbmVTZWxlY3RvchIJCgVMaW5lMBAAEgkKBUxpbmUxEAESCQoFTGluZTIQ",
            "AhIJCgVMaW5lMxADIjIKCkxpbmVTb3VyY2USFAoQQWNxdWlzaXRpb25TdGFy",
            "dBAAEg4KCkZyYW1lU3RhcnQQASJUChdDYW1lcmFQYXJhbWV0ZXJzUmVxdWVz",
            "dBINCgV3cml0ZRgBIAEoCBIqCgZwYXJhbXMYAiABKAsyGi5TZXJ2aWNlcy5D",
            "YW1lcmFQYXJhbWV0ZXJzImYKGENhbWVyYVBhcmFtZXRlcnNSZXNwb25zZRIe",
            "CgVlcnJvchgBIAEoCzIPLlNlcnZpY2VzLkVycm9yEioKBnBhcmFtcxgCIAEo",
            "CzIaLlNlcnZpY2VzLkNhbWVyYVBhcmFtZXRlcnMiGgoYQ2FtZXJhQWNxdWlz",
            "aXRpb25SZXF1ZXN0IjsKGUNhbWVyYUFjcXVpc2l0aW9uUmVzcG9uc2USHgoF",
            "ZXJyb3IYASABKAsyDy5TZXJ2aWNlcy5FcnJvciIXChVCdWZmZXJlZEZyYW1l",
            "c1JlcXVlc3QiSAoWQnVmZmVyZWRGcmFtZXNSZXNwb25zZRIeCgVlcnJvchgB",
            "IAEoCzIPLlNlcnZpY2VzLkVycm9yEg4KBmltYWdlcxgCIAMoDCoxChJDb25u",
            "ZWN0aW9uQ29tbWFuZHMSCwoHQ09OTkVDVBAAEg4KCkRJU0NPTk5FQ1QQATKp",
            "BQoLVmltYmFDYW1lcmESZQoUVmltYmFJbnN0YW5jZUNvbnRyb2wSJS5TZXJ2",
            "aWNlcy5WaW1iYUluc3RhbmNlQ29udHJvbFJlcXVlc3QaJi5TZXJ2aWNlcy5W",
            "aW1iYUluc3RhbmNlQ29udHJvbFJlc3BvbnNlEk4KEVJlcXVlc3RDYW1lcmFM",
            "aXN0EhsuU2VydmljZXMuQ2FtZXJhTGlzdFJlcXVlc3QaHC5TZXJ2aWNlcy5D",
            "YW1lcmFMaXN0UmVzcG9uc2USYAoXUmVxdWVzdENhbWVyYUNvbm5lY3Rpb24S",
            "IS5TZXJ2aWNlcy5DYW1lcmFDb25uZWN0aW9uUmVxdWVzdBoiLlNlcnZpY2Vz",
            "LkNhbWVyYUNvbm5lY3Rpb25SZXNwb25zZRJgChdSZXF1ZXN0Q2FtZXJhUGFy",
            "YW1ldGVycxIhLlNlcnZpY2VzLkNhbWVyYVBhcmFtZXRlcnNSZXF1ZXN0GiIu",
            "U2VydmljZXMuQ2FtZXJhUGFyYW1ldGVyc1Jlc3BvbnNlEmMKGFJlcXVlc3RD",
            "YW1lcmFBY3F1aXNpdGlvbhIiLlNlcnZpY2VzLkNhbWVyYUFjcXVpc2l0aW9u",
            "UmVxdWVzdBojLlNlcnZpY2VzLkNhbWVyYUFjcXVpc2l0aW9uUmVzcG9uc2US",
            "WgoVUmVxdWVzdEJ1ZmZlcmVkRnJhbWVzEh8uU2VydmljZXMuQnVmZmVyZWRG",
            "cmFtZXNSZXF1ZXN0GiAuU2VydmljZXMuQnVmZmVyZWRGcmFtZXNSZXNwb25z",
            "ZRJeChJSZXF1ZXN0RnJhbWVTdHJlYW0SIi5TZXJ2aWNlcy5DYW1lcmFBY3F1",
            "aXNpdGlvblJlcXVlc3QaIC5TZXJ2aWNlcy5CdWZmZXJlZEZyYW1lc1Jlc3Bv",
            "bnNlKAEwAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Services.ErrorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Services.ConnectionCommands), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.VimbaInstanceControlRequest), global::Services.VimbaInstanceControlRequest.Parser, new[]{ "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.VimbaInstanceControlResponse), global::Services.VimbaInstanceControlResponse.Parser, new[]{ "Error", "IsStarted" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraListRequest), global::Services.CameraListRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraListResponse), global::Services.CameraListResponse.Parser, new[]{ "Error", "CameraList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraConnectionRequest), global::Services.CameraConnectionRequest.Parser, new[]{ "CameraID", "Command" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraConnectionResponse), global::Services.CameraConnectionResponse.Parser, new[]{ "Error", "IsConnected" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraParameters), global::Services.CameraParameters.Parser, new[]{ "ExposureTime", "FrameRate", "Gain", "TriggerLineSelector", "TriggerLineInverter", "TriggerLineSource", "NumFrames" }, null, new[]{ typeof(global::Services.CameraParameters.Types.LineSelector), typeof(global::Services.CameraParameters.Types.LineSource) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraParametersRequest), global::Services.CameraParametersRequest.Parser, new[]{ "Write", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraParametersResponse), global::Services.CameraParametersResponse.Parser, new[]{ "Error", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraAcquisitionRequest), global::Services.CameraAcquisitionRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CameraAcquisitionResponse), global::Services.CameraAcquisitionResponse.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.BufferedFramesRequest), global::Services.BufferedFramesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.BufferedFramesResponse), global::Services.BufferedFramesResponse.Parser, new[]{ "Error", "Images" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ConnectionCommands {
    [pbr::OriginalName("CONNECT")] Connect = 0,
    [pbr::OriginalName("DISCONNECT")] Disconnect = 1,
  }

  #endregion

  #region Messages
  public sealed partial class VimbaInstanceControlRequest : pb::IMessage<VimbaInstanceControlRequest> {
    private static readonly pb::MessageParser<VimbaInstanceControlRequest> _parser = new pb::MessageParser<VimbaInstanceControlRequest>(() => new VimbaInstanceControlRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VimbaInstanceControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VimbaInstanceControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VimbaInstanceControlRequest(VimbaInstanceControlRequest other) : this() {
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VimbaInstanceControlRequest Clone() {
      return new VimbaInstanceControlRequest(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Services.ConnectionCommands command_ = 0;
    /// <summary>
    /// true for allocating the instance and false for release the instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.ConnectionCommands Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VimbaInstanceControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VimbaInstanceControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VimbaInstanceControlRequest other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::Services.ConnectionCommands) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VimbaInstanceControlResponse : pb::IMessage<VimbaInstanceControlResponse> {
    private static readonly pb::MessageParser<VimbaInstanceControlResponse> _parser = new pb::MessageParser<VimbaInstanceControlResponse>(() => new VimbaInstanceControlResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VimbaInstanceControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VimbaInstanceControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VimbaInstanceControlResponse(VimbaInstanceControlResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      isStarted_ = other.isStarted_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VimbaInstanceControlResponse Clone() {
      return new VimbaInstanceControlResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "isStarted" field.</summary>
    public const int IsStartedFieldNumber = 2;
    private bool isStarted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsStarted {
      get { return isStarted_; }
      set {
        isStarted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VimbaInstanceControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VimbaInstanceControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (IsStarted != other.IsStarted) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (IsStarted != false) hash ^= IsStarted.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (IsStarted != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsStarted);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (IsStarted != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VimbaInstanceControlResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.IsStarted != false) {
        IsStarted = other.IsStarted;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 16: {
            IsStarted = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request camera list
  /// </summary>
  public sealed partial class CameraListRequest : pb::IMessage<CameraListRequest> {
    private static readonly pb::MessageParser<CameraListRequest> _parser = new pb::MessageParser<CameraListRequest>(() => new CameraListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraListRequest(CameraListRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraListRequest Clone() {
      return new CameraListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraListRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CameraListResponse : pb::IMessage<CameraListResponse> {
    private static readonly pb::MessageParser<CameraListResponse> _parser = new pb::MessageParser<CameraListResponse>(() => new CameraListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraListResponse(CameraListResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      cameraList_ = other.cameraList_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraListResponse Clone() {
      return new CameraListResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "cameraList" field.</summary>
    public const int CameraListFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cameraList_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cameraList_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CameraList {
      get { return cameraList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if(!cameraList_.Equals(other.cameraList_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      hash ^= cameraList_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      cameraList_.WriteTo(output, _repeated_cameraList_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      size += cameraList_.CalculateSize(_repeated_cameraList_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraListResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      cameraList_.Add(other.cameraList_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            cameraList_.AddEntriesFrom(input, _repeated_cameraList_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request camera connection
  /// </summary>
  public sealed partial class CameraConnectionRequest : pb::IMessage<CameraConnectionRequest> {
    private static readonly pb::MessageParser<CameraConnectionRequest> _parser = new pb::MessageParser<CameraConnectionRequest>(() => new CameraConnectionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraConnectionRequest(CameraConnectionRequest other) : this() {
      cameraID_ = other.cameraID_;
      command_ = other.command_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraConnectionRequest Clone() {
      return new CameraConnectionRequest(this);
    }

    /// <summary>Field number for the "cameraID" field.</summary>
    public const int CameraIDFieldNumber = 1;
    private string cameraID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraID {
      get { return cameraID_; }
      set {
        cameraID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 2;
    private global::Services.ConnectionCommands command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.ConnectionCommands Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CameraID != other.CameraID) return false;
      if (Command != other.Command) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CameraID.Length != 0) hash ^= CameraID.GetHashCode();
      if (Command != 0) hash ^= Command.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CameraID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CameraID);
      }
      if (Command != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Command);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CameraID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraID);
      }
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.CameraID.Length != 0) {
        CameraID = other.CameraID;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            CameraID = input.ReadString();
            break;
          }
          case 16: {
            command_ = (global::Services.ConnectionCommands) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraConnectionResponse : pb::IMessage<CameraConnectionResponse> {
    private static readonly pb::MessageParser<CameraConnectionResponse> _parser = new pb::MessageParser<CameraConnectionResponse>(() => new CameraConnectionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraConnectionResponse(CameraConnectionResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      isConnected_ = other.isConnected_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraConnectionResponse Clone() {
      return new CameraConnectionResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "isConnected" field.</summary>
    public const int IsConnectedFieldNumber = 2;
    private bool isConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConnected {
      get { return isConnected_; }
      set {
        isConnected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (IsConnected != other.IsConnected) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (IsConnected != false) hash ^= IsConnected.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (IsConnected != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsConnected);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (IsConnected != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.IsConnected != false) {
        IsConnected = other.IsConnected;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 16: {
            IsConnected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request camera parameters
  /// </summary>
  public sealed partial class CameraParameters : pb::IMessage<CameraParameters> {
    private static readonly pb::MessageParser<CameraParameters> _parser = new pb::MessageParser<CameraParameters>(() => new CameraParameters());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraParameters> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParameters() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParameters(CameraParameters other) : this() {
      exposureTime_ = other.exposureTime_;
      frameRate_ = other.frameRate_;
      gain_ = other.gain_;
      triggerLineSelector_ = other.triggerLineSelector_;
      triggerLineInverter_ = other.triggerLineInverter_;
      triggerLineSource_ = other.triggerLineSource_;
      numFrames_ = other.numFrames_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParameters Clone() {
      return new CameraParameters(this);
    }

    /// <summary>Field number for the "exposureTime" field.</summary>
    public const int ExposureTimeFieldNumber = 1;
    private double exposureTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ExposureTime {
      get { return exposureTime_; }
      set {
        exposureTime_ = value;
      }
    }

    /// <summary>Field number for the "frameRate" field.</summary>
    public const int FrameRateFieldNumber = 2;
    private double frameRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FrameRate {
      get { return frameRate_; }
      set {
        frameRate_ = value;
      }
    }

    /// <summary>Field number for the "gain" field.</summary>
    public const int GainFieldNumber = 3;
    private double gain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Gain {
      get { return gain_; }
      set {
        gain_ = value;
      }
    }

    /// <summary>Field number for the "triggerLineSelector" field.</summary>
    public const int TriggerLineSelectorFieldNumber = 4;
    private global::Services.CameraParameters.Types.LineSelector triggerLineSelector_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.CameraParameters.Types.LineSelector TriggerLineSelector {
      get { return triggerLineSelector_; }
      set {
        triggerLineSelector_ = value;
      }
    }

    /// <summary>Field number for the "triggerLineInverter" field.</summary>
    public const int TriggerLineInverterFieldNumber = 5;
    private bool triggerLineInverter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TriggerLineInverter {
      get { return triggerLineInverter_; }
      set {
        triggerLineInverter_ = value;
      }
    }

    /// <summary>Field number for the "triggerLineSource" field.</summary>
    public const int TriggerLineSourceFieldNumber = 6;
    private global::Services.CameraParameters.Types.LineSource triggerLineSource_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.CameraParameters.Types.LineSource TriggerLineSource {
      get { return triggerLineSource_; }
      set {
        triggerLineSource_ = value;
      }
    }

    /// <summary>Field number for the "numFrames" field.</summary>
    public const int NumFramesFieldNumber = 7;
    private int numFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumFrames {
      get { return numFrames_; }
      set {
        numFrames_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraParameters);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraParameters other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExposureTime != other.ExposureTime) return false;
      if (FrameRate != other.FrameRate) return false;
      if (Gain != other.Gain) return false;
      if (TriggerLineSelector != other.TriggerLineSelector) return false;
      if (TriggerLineInverter != other.TriggerLineInverter) return false;
      if (TriggerLineSource != other.TriggerLineSource) return false;
      if (NumFrames != other.NumFrames) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExposureTime != 0D) hash ^= ExposureTime.GetHashCode();
      if (FrameRate != 0D) hash ^= FrameRate.GetHashCode();
      if (Gain != 0D) hash ^= Gain.GetHashCode();
      if (TriggerLineSelector != 0) hash ^= TriggerLineSelector.GetHashCode();
      if (TriggerLineInverter != false) hash ^= TriggerLineInverter.GetHashCode();
      if (TriggerLineSource != 0) hash ^= TriggerLineSource.GetHashCode();
      if (NumFrames != 0) hash ^= NumFrames.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExposureTime != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ExposureTime);
      }
      if (FrameRate != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(FrameRate);
      }
      if (Gain != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Gain);
      }
      if (TriggerLineSelector != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TriggerLineSelector);
      }
      if (TriggerLineInverter != false) {
        output.WriteRawTag(40);
        output.WriteBool(TriggerLineInverter);
      }
      if (TriggerLineSource != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) TriggerLineSource);
      }
      if (NumFrames != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NumFrames);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExposureTime != 0D) {
        size += 1 + 8;
      }
      if (FrameRate != 0D) {
        size += 1 + 8;
      }
      if (Gain != 0D) {
        size += 1 + 8;
      }
      if (TriggerLineSelector != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerLineSelector);
      }
      if (TriggerLineInverter != false) {
        size += 1 + 1;
      }
      if (TriggerLineSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TriggerLineSource);
      }
      if (NumFrames != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumFrames);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraParameters other) {
      if (other == null) {
        return;
      }
      if (other.ExposureTime != 0D) {
        ExposureTime = other.ExposureTime;
      }
      if (other.FrameRate != 0D) {
        FrameRate = other.FrameRate;
      }
      if (other.Gain != 0D) {
        Gain = other.Gain;
      }
      if (other.TriggerLineSelector != 0) {
        TriggerLineSelector = other.TriggerLineSelector;
      }
      if (other.TriggerLineInverter != false) {
        TriggerLineInverter = other.TriggerLineInverter;
      }
      if (other.TriggerLineSource != 0) {
        TriggerLineSource = other.TriggerLineSource;
      }
      if (other.NumFrames != 0) {
        NumFrames = other.NumFrames;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ExposureTime = input.ReadDouble();
            break;
          }
          case 17: {
            FrameRate = input.ReadDouble();
            break;
          }
          case 25: {
            Gain = input.ReadDouble();
            break;
          }
          case 32: {
            triggerLineSelector_ = (global::Services.CameraParameters.Types.LineSelector) input.ReadEnum();
            break;
          }
          case 40: {
            TriggerLineInverter = input.ReadBool();
            break;
          }
          case 48: {
            triggerLineSource_ = (global::Services.CameraParameters.Types.LineSource) input.ReadEnum();
            break;
          }
          case 56: {
            NumFrames = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CameraParameters message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LineSelector {
        [pbr::OriginalName("Line0")] Line0 = 0,
        [pbr::OriginalName("Line1")] Line1 = 1,
        [pbr::OriginalName("Line2")] Line2 = 2,
        [pbr::OriginalName("Line3")] Line3 = 3,
      }

      public enum LineSource {
        [pbr::OriginalName("AcquisitionStart")] AcquisitionStart = 0,
        [pbr::OriginalName("FrameStart")] FrameStart = 1,
      }

    }
    #endregion

  }

  public sealed partial class CameraParametersRequest : pb::IMessage<CameraParametersRequest> {
    private static readonly pb::MessageParser<CameraParametersRequest> _parser = new pb::MessageParser<CameraParametersRequest>(() => new CameraParametersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraParametersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParametersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParametersRequest(CameraParametersRequest other) : this() {
      write_ = other.write_;
      Params = other.params_ != null ? other.Params.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParametersRequest Clone() {
      return new CameraParametersRequest(this);
    }

    /// <summary>Field number for the "write" field.</summary>
    public const int WriteFieldNumber = 1;
    private bool write_;
    /// <summary>
    /// true to write the parameters and false to read
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Write {
      get { return write_; }
      set {
        write_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private global::Services.CameraParameters params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.CameraParameters Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraParametersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraParametersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Write != other.Write) return false;
      if (!object.Equals(Params, other.Params)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Write != false) hash ^= Write.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Write != false) {
        output.WriteRawTag(8);
        output.WriteBool(Write);
      }
      if (params_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Params);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Write != false) {
        size += 1 + 1;
      }
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraParametersRequest other) {
      if (other == null) {
        return;
      }
      if (other.Write != false) {
        Write = other.Write;
      }
      if (other.params_ != null) {
        if (params_ == null) {
          params_ = new global::Services.CameraParameters();
        }
        Params.MergeFrom(other.Params);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Write = input.ReadBool();
            break;
          }
          case 18: {
            if (params_ == null) {
              params_ = new global::Services.CameraParameters();
            }
            input.ReadMessage(params_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraParametersResponse : pb::IMessage<CameraParametersResponse> {
    private static readonly pb::MessageParser<CameraParametersResponse> _parser = new pb::MessageParser<CameraParametersResponse>(() => new CameraParametersResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraParametersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParametersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParametersResponse(CameraParametersResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      Params = other.params_ != null ? other.Params.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraParametersResponse Clone() {
      return new CameraParametersResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 2;
    private global::Services.CameraParameters params_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.CameraParameters Params {
      get { return params_; }
      set {
        params_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraParametersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraParametersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Params, other.Params)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (params_ != null) hash ^= Params.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (params_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Params);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (params_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Params);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraParametersResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.params_ != null) {
        if (params_ == null) {
          params_ = new global::Services.CameraParameters();
        }
        Params.MergeFrom(other.Params);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            if (params_ == null) {
              params_ = new global::Services.CameraParameters();
            }
            input.ReadMessage(params_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraAcquisitionRequest : pb::IMessage<CameraAcquisitionRequest> {
    private static readonly pb::MessageParser<CameraAcquisitionRequest> _parser = new pb::MessageParser<CameraAcquisitionRequest>(() => new CameraAcquisitionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraAcquisitionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAcquisitionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAcquisitionRequest(CameraAcquisitionRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAcquisitionRequest Clone() {
      return new CameraAcquisitionRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraAcquisitionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraAcquisitionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraAcquisitionRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CameraAcquisitionResponse : pb::IMessage<CameraAcquisitionResponse> {
    private static readonly pb::MessageParser<CameraAcquisitionResponse> _parser = new pb::MessageParser<CameraAcquisitionResponse>(() => new CameraAcquisitionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraAcquisitionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAcquisitionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAcquisitionResponse(CameraAcquisitionResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAcquisitionResponse Clone() {
      return new CameraAcquisitionResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraAcquisitionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraAcquisitionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraAcquisitionResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferedFramesRequest : pb::IMessage<BufferedFramesRequest> {
    private static readonly pb::MessageParser<BufferedFramesRequest> _parser = new pb::MessageParser<BufferedFramesRequest>(() => new BufferedFramesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferedFramesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedFramesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedFramesRequest(BufferedFramesRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedFramesRequest Clone() {
      return new BufferedFramesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferedFramesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferedFramesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferedFramesRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class BufferedFramesResponse : pb::IMessage<BufferedFramesResponse> {
    private static readonly pb::MessageParser<BufferedFramesResponse> _parser = new pb::MessageParser<BufferedFramesResponse>(() => new BufferedFramesResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferedFramesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedFramesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedFramesResponse(BufferedFramesResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      images_ = other.images_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferedFramesResponse Clone() {
      return new BufferedFramesResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "images" field.</summary>
    public const int ImagesFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_images_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> images_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Images {
      get { return images_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferedFramesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferedFramesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if(!images_.Equals(other.images_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      hash ^= images_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      images_.WriteTo(output, _repeated_images_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      size += images_.CalculateSize(_repeated_images_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferedFramesResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      images_.Add(other.images_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            images_.AddEntriesFrom(input, _repeated_images_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
