// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CameraControllerService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Services {

  /// <summary>Holder for reflection information generated from CameraControllerService.proto</summary>
  public static partial class CameraControllerServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for CameraControllerService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraControllerServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1DYW1lcmFDb250cm9sbGVyU2VydmljZS5wcm90bxIIU2VydmljZXMaG2dv",
            "b2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90bxoLRXJyb3IucHJvdG8iVwoLVmVy",
            "c2lvbkluZm8SFwoPaGFyZHdhcmVWZXJzaW9uGAEgASgJEhcKD2Zpcm13YXJl",
            "VmVyc2lvbhgCIAEoCRIWCg5zZXJ2aWNlVmVyc2lvbhgDIAEoCSIQCg5Db21M",
            "aXN0UmVxdWVzdCI6CgdDb21MaXN0Eh4KBWVycm9yGAEgASgLMg8uU2Vydmlj",
            "ZXMuRXJyb3ISDwoHY29tUG9ydBgCIAMoCSJJChJDb25uZWN0aW9uUmVzcG9u",
            "c2USHgoFZXJyb3IYASABKAsyDy5TZXJ2aWNlcy5FcnJvchITCgtpc0Nvbm5l",
            "Y3RlZBgCIAEoCCI1ChFDb25uZWN0aW9uUmVxdWVzdBIPCgdjb25uZWN0GAEg",
            "ASgIEg8KB2NvbVBvcnQYAiABKAkiNgoSUG93ZXJTdGF0dXNSZXF1ZXN0Eg0K",
            "BXdyaXRlGAEgASgIEhEKCXBvd2VyQ29kZRgCIAEoBSJIChNQb3dlclN0YXR1",
            "c1Jlc3BvbnNlEh4KBWVycm9yGAEgASgLMg8uU2VydmljZXMuRXJyb3ISEQoJ",
            "cG93ZXJDb2RlGAIgASgFIhYKFEN1cnJlbnRTdGF0dXNSZXF1ZXN0IkgKFUN1",
            "cnJlbnRTdGF0dXNSZXNwb25zZRIeCgVlcnJvchgBIAEoCzIPLlNlcnZpY2Vz",
            "LkVycm9yEg8KB2N1cnJlbnQYAiABKAEiYwoSRm9jdXNTdGF0dXNSZXF1ZXN0",
            "EhEKCWF1dG9Qb3dlchgBIAEoCBITCgtkcml2ZXJQb3dlchgCIAEoCBINCgVz",
            "dGVwcxgDIAEoERIWCg5zbG93ZG93bkZhY3RvchgEIAEoBSJNChNGb2N1c1N0",
            "YXR1c1Jlc3BvbnNlEh4KBWVycm9yGAEgASgLMg8uU2VydmljZXMuRXJyb3IS",
            "FgoOc2xvd2Rvd25GYWN0b3IYAiABKAUiOwoSTGFzZXJTdGF0dXNSZXF1ZXN0",
            "EhIKCmR1cmF0aW9uVXMYAiABKAMSEQoJaW50ZW5zaXR5GAMgASgDIjUKE0xh",
            "c2VyU3RhdHVzUmVzcG9uc2USHgoFZXJyb3IYASABKAsyDy5TZXJ2aWNlcy5F",
            "cnJvciJ7ChFBcm1UcmlnZ2VyUmVxdWVzdBISCgphcm1UcmlnZ2VyGAEgASgI",
            "EhgKEG1heFRyaWdnZXJUaW1lVXMYAiABKAMSOAoSbGFzZXJDb25maWd1cmF0",
            "aW9uGAMgASgLMhwuU2VydmljZXMuTGFzZXJTdGF0dXNSZXF1ZXN0IlEKEkFy",
            "bVRyaWdnZXJSZXNwb25zZRIeCgVlcnJvchgBIAEoCzIPLlNlcnZpY2VzLkVy",
            "cm9yEhsKE3RyaWdnZXJBdXRvRGlzYXJtZWQYAiABKAgiNQoTU29mdHdhcmVS",
            "ZXNldFN0YXR1cxIeCgVlcnJvchgBIAEoCzIPLlNlcnZpY2VzLkVycm9yMu4G",
            "ChBDYW1lcmFDb250cm9sbGVyEjgKB0dldEluZm8SFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkaFS5TZXJ2aWNlcy5WZXJzaW9uSW5mbxJDCgtJc0Nvbm5lY3Rl",
            "ZBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRocLlNlcnZpY2VzLkNvbm5lY3Rp",
            "b25SZXNwb25zZRI9Cg5SZXF1ZXN0Q29tTGlzdBIYLlNlcnZpY2VzLkNvbUxp",
            "c3RSZXF1ZXN0GhEuU2VydmljZXMuQ29tTGlzdBJRChRSZXF1ZXN0Q29ubmVj",
            "dFRvUG9ydBIbLlNlcnZpY2VzLkNvbm5lY3Rpb25SZXF1ZXN0GhwuU2Vydmlj",
            "ZXMuQ29ubmVjdGlvblJlc3BvbnNlElEKElJlcXVlc3RQb3dlclN0YXR1cxIc",
            "LlNlcnZpY2VzLlBvd2VyU3RhdHVzUmVxdWVzdBodLlNlcnZpY2VzLlBvd2Vy",
            "U3RhdHVzUmVzcG9uc2USVwoUUmVxdWVzdEN1cnJlbnRTdGF0dXMSHi5TZXJ2",
            "aWNlcy5DdXJyZW50U3RhdHVzUmVxdWVzdBofLlNlcnZpY2VzLkN1cnJlbnRT",
            "dGF0dXNSZXNwb25zZRJRChJSZXF1ZXN0Rm9jdXNTdGF0dXMSHC5TZXJ2aWNl",
            "cy5Gb2N1c1N0YXR1c1JlcXVlc3QaHS5TZXJ2aWNlcy5Gb2N1c1N0YXR1c1Jl",
            "c3BvbnNlElEKElJlcXVlc3RMYXNlclN0YXR1cxIcLlNlcnZpY2VzLkxhc2Vy",
            "U3RhdHVzUmVxdWVzdBodLlNlcnZpY2VzLkxhc2VyU3RhdHVzUmVzcG9uc2US",
            "TgoRUmVxdWVzdEFybVRyaWdnZXISGy5TZXJ2aWNlcy5Bcm1UcmlnZ2VyUmVx",
            "dWVzdBocLlNlcnZpY2VzLkFybVRyaWdnZXJSZXNwb25zZRJNChRSZXF1ZXN0",
            "U29mdHdhcmVSZXNldBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRodLlNlcnZp",
            "Y2VzLlNvZnR3YXJlUmVzZXRTdGF0dXMSWAoXU3RyZWFtUmVxdWVzdEFybVRy",
            "aWdnZXISGy5TZXJ2aWNlcy5Bcm1UcmlnZ2VyUmVxdWVzdBocLlNlcnZpY2Vz",
            "LkFybVRyaWdnZXJSZXNwb25zZSgBMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Services.ErrorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.VersionInfo), global::Services.VersionInfo.Parser, new[]{ "HardwareVersion", "FirmwareVersion", "ServiceVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.ComListRequest), global::Services.ComListRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.ComList), global::Services.ComList.Parser, new[]{ "Error", "ComPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.ConnectionResponse), global::Services.ConnectionResponse.Parser, new[]{ "Error", "IsConnected" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.ConnectionRequest), global::Services.ConnectionRequest.Parser, new[]{ "Connect", "ComPort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.PowerStatusRequest), global::Services.PowerStatusRequest.Parser, new[]{ "Write", "PowerCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.PowerStatusResponse), global::Services.PowerStatusResponse.Parser, new[]{ "Error", "PowerCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CurrentStatusRequest), global::Services.CurrentStatusRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.CurrentStatusResponse), global::Services.CurrentStatusResponse.Parser, new[]{ "Error", "Current" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.FocusStatusRequest), global::Services.FocusStatusRequest.Parser, new[]{ "AutoPower", "DriverPower", "Steps", "SlowdownFactor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.FocusStatusResponse), global::Services.FocusStatusResponse.Parser, new[]{ "Error", "SlowdownFactor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.LaserStatusRequest), global::Services.LaserStatusRequest.Parser, new[]{ "DurationUs", "Intensity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.LaserStatusResponse), global::Services.LaserStatusResponse.Parser, new[]{ "Error" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.ArmTriggerRequest), global::Services.ArmTriggerRequest.Parser, new[]{ "ArmTrigger", "MaxTriggerTimeUs", "LaserConfiguration" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.ArmTriggerResponse), global::Services.ArmTriggerResponse.Parser, new[]{ "Error", "TriggerAutoDisarmed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Services.SoftwareResetStatus), global::Services.SoftwareResetStatus.Parser, new[]{ "Error" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class VersionInfo : pb::IMessage<VersionInfo> {
    private static readonly pb::MessageParser<VersionInfo> _parser = new pb::MessageParser<VersionInfo>(() => new VersionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionInfo(VersionInfo other) : this() {
      hardwareVersion_ = other.hardwareVersion_;
      firmwareVersion_ = other.firmwareVersion_;
      serviceVersion_ = other.serviceVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionInfo Clone() {
      return new VersionInfo(this);
    }

    /// <summary>Field number for the "hardwareVersion" field.</summary>
    public const int HardwareVersionFieldNumber = 1;
    private string hardwareVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HardwareVersion {
      get { return hardwareVersion_; }
      set {
        hardwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "firmwareVersion" field.</summary>
    public const int FirmwareVersionFieldNumber = 2;
    private string firmwareVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirmwareVersion {
      get { return firmwareVersion_; }
      set {
        firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceVersion" field.</summary>
    public const int ServiceVersionFieldNumber = 3;
    private string serviceVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceVersion {
      get { return serviceVersion_; }
      set {
        serviceVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HardwareVersion != other.HardwareVersion) return false;
      if (FirmwareVersion != other.FirmwareVersion) return false;
      if (ServiceVersion != other.ServiceVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HardwareVersion.Length != 0) hash ^= HardwareVersion.GetHashCode();
      if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
      if (ServiceVersion.Length != 0) hash ^= ServiceVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HardwareVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(HardwareVersion);
      }
      if (FirmwareVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirmwareVersion);
      }
      if (ServiceVersion.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HardwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareVersion);
      }
      if (FirmwareVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
      }
      if (ServiceVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionInfo other) {
      if (other == null) {
        return;
      }
      if (other.HardwareVersion.Length != 0) {
        HardwareVersion = other.HardwareVersion;
      }
      if (other.FirmwareVersion.Length != 0) {
        FirmwareVersion = other.FirmwareVersion;
      }
      if (other.ServiceVersion.Length != 0) {
        ServiceVersion = other.ServiceVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            HardwareVersion = input.ReadString();
            break;
          }
          case 18: {
            FirmwareVersion = input.ReadString();
            break;
          }
          case 26: {
            ServiceVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ComListRequest : pb::IMessage<ComListRequest> {
    private static readonly pb::MessageParser<ComListRequest> _parser = new pb::MessageParser<ComListRequest>(() => new ComListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComListRequest(ComListRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComListRequest Clone() {
      return new ComListRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComListRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ComList : pb::IMessage<ComList> {
    private static readonly pb::MessageParser<ComList> _parser = new pb::MessageParser<ComList>(() => new ComList());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ComList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComList(ComList other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      comPort_ = other.comPort_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ComList Clone() {
      return new ComList(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "comPort" field.</summary>
    public const int ComPortFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_comPort_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> comPort_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ComPort {
      get { return comPort_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ComList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ComList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if(!comPort_.Equals(other.comPort_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      hash ^= comPort_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      comPort_.WriteTo(output, _repeated_comPort_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      size += comPort_.CalculateSize(_repeated_comPort_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ComList other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      comPort_.Add(other.comPort_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 18: {
            comPort_.AddEntriesFrom(input, _repeated_comPort_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectionResponse : pb::IMessage<ConnectionResponse> {
    private static readonly pb::MessageParser<ConnectionResponse> _parser = new pb::MessageParser<ConnectionResponse>(() => new ConnectionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse(ConnectionResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      isConnected_ = other.isConnected_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionResponse Clone() {
      return new ConnectionResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "isConnected" field.</summary>
    public const int IsConnectedFieldNumber = 2;
    private bool isConnected_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsConnected {
      get { return isConnected_; }
      set {
        isConnected_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (IsConnected != other.IsConnected) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (IsConnected != false) hash ^= IsConnected.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (IsConnected != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsConnected);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (IsConnected != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.IsConnected != false) {
        IsConnected = other.IsConnected;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 16: {
            IsConnected = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Connection message pair
  /// </summary>
  public sealed partial class ConnectionRequest : pb::IMessage<ConnectionRequest> {
    private static readonly pb::MessageParser<ConnectionRequest> _parser = new pb::MessageParser<ConnectionRequest>(() => new ConnectionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest(ConnectionRequest other) : this() {
      connect_ = other.connect_;
      comPort_ = other.comPort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionRequest Clone() {
      return new ConnectionRequest(this);
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 1;
    private bool connect_;
    /// <summary>
    /// request made to connect (true) or disconnect (false)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Connect {
      get { return connect_; }
      set {
        connect_ = value;
      }
    }

    /// <summary>Field number for the "comPort" field.</summary>
    public const int ComPortFieldNumber = 2;
    private string comPort_ = "";
    /// <summary>
    /// which port to connect;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ComPort {
      get { return comPort_; }
      set {
        comPort_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Connect != other.Connect) return false;
      if (ComPort != other.ComPort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Connect != false) hash ^= Connect.GetHashCode();
      if (ComPort.Length != 0) hash ^= ComPort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Connect != false) {
        output.WriteRawTag(8);
        output.WriteBool(Connect);
      }
      if (ComPort.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ComPort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Connect != false) {
        size += 1 + 1;
      }
      if (ComPort.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ComPort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Connect != false) {
        Connect = other.Connect;
      }
      if (other.ComPort.Length != 0) {
        ComPort = other.ComPort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Connect = input.ReadBool();
            break;
          }
          case 18: {
            ComPort = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// PowerStatus message pair
  /// </summary>
  public sealed partial class PowerStatusRequest : pb::IMessage<PowerStatusRequest> {
    private static readonly pb::MessageParser<PowerStatusRequest> _parser = new pb::MessageParser<PowerStatusRequest>(() => new PowerStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerStatusRequest(PowerStatusRequest other) : this() {
      write_ = other.write_;
      powerCode_ = other.powerCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerStatusRequest Clone() {
      return new PowerStatusRequest(this);
    }

    /// <summary>Field number for the "write" field.</summary>
    public const int WriteFieldNumber = 1;
    private bool write_;
    /// <summary>
    /// Set write to true to enable write operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Write {
      get { return write_; }
      set {
        write_ = value;
      }
    }

    /// <summary>Field number for the "powerCode" field.</summary>
    public const int PowerCodeFieldNumber = 2;
    private int powerCode_;
    /// <summary>
    /// Set power code as the bitwise power configuration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerCode {
      get { return powerCode_; }
      set {
        powerCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Write != other.Write) return false;
      if (PowerCode != other.PowerCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Write != false) hash ^= Write.GetHashCode();
      if (PowerCode != 0) hash ^= PowerCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Write != false) {
        output.WriteRawTag(8);
        output.WriteBool(Write);
      }
      if (PowerCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PowerCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Write != false) {
        size += 1 + 1;
      }
      if (PowerCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.Write != false) {
        Write = other.Write;
      }
      if (other.PowerCode != 0) {
        PowerCode = other.PowerCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Write = input.ReadBool();
            break;
          }
          case 16: {
            PowerCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PowerStatusResponse : pb::IMessage<PowerStatusResponse> {
    private static readonly pb::MessageParser<PowerStatusResponse> _parser = new pb::MessageParser<PowerStatusResponse>(() => new PowerStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerStatusResponse(PowerStatusResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      powerCode_ = other.powerCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerStatusResponse Clone() {
      return new PowerStatusResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "powerCode" field.</summary>
    public const int PowerCodeFieldNumber = 2;
    private int powerCode_;
    /// <summary>
    /// power code after execution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerCode {
      get { return powerCode_; }
      set {
        powerCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (PowerCode != other.PowerCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (PowerCode != 0) hash ^= PowerCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (PowerCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PowerCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (PowerCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.PowerCode != 0) {
        PowerCode = other.PowerCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 16: {
            PowerCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Current status message pair
  /// </summary>
  public sealed partial class CurrentStatusRequest : pb::IMessage<CurrentStatusRequest> {
    private static readonly pb::MessageParser<CurrentStatusRequest> _parser = new pb::MessageParser<CurrentStatusRequest>(() => new CurrentStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentStatusRequest(CurrentStatusRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentStatusRequest Clone() {
      return new CurrentStatusRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentStatusRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class CurrentStatusResponse : pb::IMessage<CurrentStatusResponse> {
    private static readonly pb::MessageParser<CurrentStatusResponse> _parser = new pb::MessageParser<CurrentStatusResponse>(() => new CurrentStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentStatusResponse(CurrentStatusResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      current_ = other.current_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CurrentStatusResponse Clone() {
      return new CurrentStatusResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 2;
    private double current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CurrentStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CurrentStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (Current != other.Current) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (Current != 0D) hash ^= Current.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (Current != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Current);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (Current != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CurrentStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.Current != 0D) {
        Current = other.Current;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 17: {
            Current = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Focus status message pair
  /// </summary>
  public sealed partial class FocusStatusRequest : pb::IMessage<FocusStatusRequest> {
    private static readonly pb::MessageParser<FocusStatusRequest> _parser = new pb::MessageParser<FocusStatusRequest>(() => new FocusStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FocusStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusStatusRequest(FocusStatusRequest other) : this() {
      autoPower_ = other.autoPower_;
      driverPower_ = other.driverPower_;
      steps_ = other.steps_;
      slowdownFactor_ = other.slowdownFactor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusStatusRequest Clone() {
      return new FocusStatusRequest(this);
    }

    /// <summary>Field number for the "autoPower" field.</summary>
    public const int AutoPowerFieldNumber = 1;
    private bool autoPower_;
    /// <summary>
    /// true to enable auto power of the stepper driver. This will ignore the driverPower field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoPower {
      get { return autoPower_; }
      set {
        autoPower_ = value;
      }
    }

    /// <summary>Field number for the "driverPower" field.</summary>
    public const int DriverPowerFieldNumber = 2;
    private bool driverPower_;
    /// <summary>
    /// manual setting to control the power of the driver.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DriverPower {
      get { return driverPower_; }
      set {
        driverPower_ = value;
      }
    }

    /// <summary>Field number for the "steps" field.</summary>
    public const int StepsFieldNumber = 3;
    private int steps_;
    /// <summary>
    /// positive up, negative down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Steps {
      get { return steps_; }
      set {
        steps_ = value;
      }
    }

    /// <summary>Field number for the "slowdownFactor" field.</summary>
    public const int SlowdownFactorFieldNumber = 4;
    private int slowdownFactor_;
    /// <summary>
    /// The greater the slower
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlowdownFactor {
      get { return slowdownFactor_; }
      set {
        slowdownFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FocusStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FocusStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AutoPower != other.AutoPower) return false;
      if (DriverPower != other.DriverPower) return false;
      if (Steps != other.Steps) return false;
      if (SlowdownFactor != other.SlowdownFactor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AutoPower != false) hash ^= AutoPower.GetHashCode();
      if (DriverPower != false) hash ^= DriverPower.GetHashCode();
      if (Steps != 0) hash ^= Steps.GetHashCode();
      if (SlowdownFactor != 0) hash ^= SlowdownFactor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AutoPower != false) {
        output.WriteRawTag(8);
        output.WriteBool(AutoPower);
      }
      if (DriverPower != false) {
        output.WriteRawTag(16);
        output.WriteBool(DriverPower);
      }
      if (Steps != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(Steps);
      }
      if (SlowdownFactor != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SlowdownFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AutoPower != false) {
        size += 1 + 1;
      }
      if (DriverPower != false) {
        size += 1 + 1;
      }
      if (Steps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Steps);
      }
      if (SlowdownFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlowdownFactor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FocusStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.AutoPower != false) {
        AutoPower = other.AutoPower;
      }
      if (other.DriverPower != false) {
        DriverPower = other.DriverPower;
      }
      if (other.Steps != 0) {
        Steps = other.Steps;
      }
      if (other.SlowdownFactor != 0) {
        SlowdownFactor = other.SlowdownFactor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AutoPower = input.ReadBool();
            break;
          }
          case 16: {
            DriverPower = input.ReadBool();
            break;
          }
          case 24: {
            Steps = input.ReadSInt32();
            break;
          }
          case 32: {
            SlowdownFactor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FocusStatusResponse : pb::IMessage<FocusStatusResponse> {
    private static readonly pb::MessageParser<FocusStatusResponse> _parser = new pb::MessageParser<FocusStatusResponse>(() => new FocusStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FocusStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusStatusResponse(FocusStatusResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      slowdownFactor_ = other.slowdownFactor_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocusStatusResponse Clone() {
      return new FocusStatusResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "slowdownFactor" field.</summary>
    public const int SlowdownFactorFieldNumber = 2;
    private int slowdownFactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SlowdownFactor {
      get { return slowdownFactor_; }
      set {
        slowdownFactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FocusStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FocusStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (SlowdownFactor != other.SlowdownFactor) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (SlowdownFactor != 0) hash ^= SlowdownFactor.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (SlowdownFactor != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SlowdownFactor);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (SlowdownFactor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SlowdownFactor);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FocusStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.SlowdownFactor != 0) {
        SlowdownFactor = other.SlowdownFactor;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 16: {
            SlowdownFactor = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Laser status pairs
  /// </summary>
  public sealed partial class LaserStatusRequest : pb::IMessage<LaserStatusRequest> {
    private static readonly pb::MessageParser<LaserStatusRequest> _parser = new pb::MessageParser<LaserStatusRequest>(() => new LaserStatusRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaserStatusRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaserStatusRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaserStatusRequest(LaserStatusRequest other) : this() {
      durationUs_ = other.durationUs_;
      intensity_ = other.intensity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaserStatusRequest Clone() {
      return new LaserStatusRequest(this);
    }

    /// <summary>Field number for the "durationUs" field.</summary>
    public const int DurationUsFieldNumber = 2;
    private long durationUs_;
    /// <summary>
    /// Microseconds of laser on duration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DurationUs {
      get { return durationUs_; }
      set {
        durationUs_ = value;
      }
    }

    /// <summary>Field number for the "intensity" field.</summary>
    public const int IntensityFieldNumber = 3;
    private long intensity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Intensity {
      get { return intensity_; }
      set {
        intensity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaserStatusRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaserStatusRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DurationUs != other.DurationUs) return false;
      if (Intensity != other.Intensity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DurationUs != 0L) hash ^= DurationUs.GetHashCode();
      if (Intensity != 0L) hash ^= Intensity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DurationUs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(DurationUs);
      }
      if (Intensity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Intensity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DurationUs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DurationUs);
      }
      if (Intensity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Intensity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaserStatusRequest other) {
      if (other == null) {
        return;
      }
      if (other.DurationUs != 0L) {
        DurationUs = other.DurationUs;
      }
      if (other.Intensity != 0L) {
        Intensity = other.Intensity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 16: {
            DurationUs = input.ReadInt64();
            break;
          }
          case 24: {
            Intensity = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LaserStatusResponse : pb::IMessage<LaserStatusResponse> {
    private static readonly pb::MessageParser<LaserStatusResponse> _parser = new pb::MessageParser<LaserStatusResponse>(() => new LaserStatusResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LaserStatusResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaserStatusResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaserStatusResponse(LaserStatusResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LaserStatusResponse Clone() {
      return new LaserStatusResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LaserStatusResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LaserStatusResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LaserStatusResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Arm trigger request pair
  /// </summary>
  public sealed partial class ArmTriggerRequest : pb::IMessage<ArmTriggerRequest> {
    private static readonly pb::MessageParser<ArmTriggerRequest> _parser = new pb::MessageParser<ArmTriggerRequest>(() => new ArmTriggerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmTriggerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmTriggerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmTriggerRequest(ArmTriggerRequest other) : this() {
      armTrigger_ = other.armTrigger_;
      maxTriggerTimeUs_ = other.maxTriggerTimeUs_;
      LaserConfiguration = other.laserConfiguration_ != null ? other.LaserConfiguration.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmTriggerRequest Clone() {
      return new ArmTriggerRequest(this);
    }

    /// <summary>Field number for the "armTrigger" field.</summary>
    public const int ArmTriggerFieldNumber = 1;
    private bool armTrigger_;
    /// <summary>
    /// True to arm the trigger; false to disarm the trigger
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ArmTrigger {
      get { return armTrigger_; }
      set {
        armTrigger_ = value;
      }
    }

    /// <summary>Field number for the "maxTriggerTimeUs" field.</summary>
    public const int MaxTriggerTimeUsFieldNumber = 2;
    private long maxTriggerTimeUs_;
    /// <summary>
    /// How many microseconds before the trigger get disarmed automatically
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxTriggerTimeUs {
      get { return maxTriggerTimeUs_; }
      set {
        maxTriggerTimeUs_ = value;
      }
    }

    /// <summary>Field number for the "laserConfiguration" field.</summary>
    public const int LaserConfigurationFieldNumber = 3;
    private global::Services.LaserStatusRequest laserConfiguration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.LaserStatusRequest LaserConfiguration {
      get { return laserConfiguration_; }
      set {
        laserConfiguration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmTriggerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmTriggerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ArmTrigger != other.ArmTrigger) return false;
      if (MaxTriggerTimeUs != other.MaxTriggerTimeUs) return false;
      if (!object.Equals(LaserConfiguration, other.LaserConfiguration)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ArmTrigger != false) hash ^= ArmTrigger.GetHashCode();
      if (MaxTriggerTimeUs != 0L) hash ^= MaxTriggerTimeUs.GetHashCode();
      if (laserConfiguration_ != null) hash ^= LaserConfiguration.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ArmTrigger != false) {
        output.WriteRawTag(8);
        output.WriteBool(ArmTrigger);
      }
      if (MaxTriggerTimeUs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MaxTriggerTimeUs);
      }
      if (laserConfiguration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LaserConfiguration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ArmTrigger != false) {
        size += 1 + 1;
      }
      if (MaxTriggerTimeUs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxTriggerTimeUs);
      }
      if (laserConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LaserConfiguration);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmTriggerRequest other) {
      if (other == null) {
        return;
      }
      if (other.ArmTrigger != false) {
        ArmTrigger = other.ArmTrigger;
      }
      if (other.MaxTriggerTimeUs != 0L) {
        MaxTriggerTimeUs = other.MaxTriggerTimeUs;
      }
      if (other.laserConfiguration_ != null) {
        if (laserConfiguration_ == null) {
          laserConfiguration_ = new global::Services.LaserStatusRequest();
        }
        LaserConfiguration.MergeFrom(other.LaserConfiguration);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ArmTrigger = input.ReadBool();
            break;
          }
          case 16: {
            MaxTriggerTimeUs = input.ReadInt64();
            break;
          }
          case 26: {
            if (laserConfiguration_ == null) {
              laserConfiguration_ = new global::Services.LaserStatusRequest();
            }
            input.ReadMessage(laserConfiguration_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArmTriggerResponse : pb::IMessage<ArmTriggerResponse> {
    private static readonly pb::MessageParser<ArmTriggerResponse> _parser = new pb::MessageParser<ArmTriggerResponse>(() => new ArmTriggerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArmTriggerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmTriggerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmTriggerResponse(ArmTriggerResponse other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
      triggerAutoDisarmed_ = other.triggerAutoDisarmed_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArmTriggerResponse Clone() {
      return new ArmTriggerResponse(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "triggerAutoDisarmed" field.</summary>
    public const int TriggerAutoDisarmedFieldNumber = 2;
    private bool triggerAutoDisarmed_;
    /// <summary>
    /// true for no interrupt received and maximum time exceeded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TriggerAutoDisarmed {
      get { return triggerAutoDisarmed_; }
      set {
        triggerAutoDisarmed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArmTriggerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArmTriggerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      if (TriggerAutoDisarmed != other.TriggerAutoDisarmed) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      if (TriggerAutoDisarmed != false) hash ^= TriggerAutoDisarmed.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
      if (TriggerAutoDisarmed != false) {
        output.WriteRawTag(16);
        output.WriteBool(TriggerAutoDisarmed);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (TriggerAutoDisarmed != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArmTriggerResponse other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
      if (other.TriggerAutoDisarmed != false) {
        TriggerAutoDisarmed = other.TriggerAutoDisarmed;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
          case 16: {
            TriggerAutoDisarmed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoftwareResetStatus : pb::IMessage<SoftwareResetStatus> {
    private static readonly pb::MessageParser<SoftwareResetStatus> _parser = new pb::MessageParser<SoftwareResetStatus>(() => new SoftwareResetStatus());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoftwareResetStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Services.CameraControllerServiceReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareResetStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareResetStatus(SoftwareResetStatus other) : this() {
      Error = other.error_ != null ? other.Error.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftwareResetStatus Clone() {
      return new SoftwareResetStatus(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private global::Services.Error error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Services.Error Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoftwareResetStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoftwareResetStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Error, other.Error)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (error_ != null) hash ^= Error.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (error_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (error_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoftwareResetStatus other) {
      if (other == null) {
        return;
      }
      if (other.error_ != null) {
        if (error_ == null) {
          error_ = new global::Services.Error();
        }
        Error.MergeFrom(other.Error);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (error_ == null) {
              error_ = new global::Services.Error();
            }
            input.ReadMessage(error_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
