// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CameraService.proto
// </auto-generated>
// Original file comments:
// TODO: determine whether the service support Multiple camera instance; It is current a limitation
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Services {
  public static partial class VimbaCamera
  {
    static readonly string __ServiceName = "Services.VimbaCamera";

    static readonly grpc::Marshaller<global::Services.VimbaInstanceControlRequest> __Marshaller_VimbaInstanceControlRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.VimbaInstanceControlRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.VimbaInstanceControlResponse> __Marshaller_VimbaInstanceControlResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.VimbaInstanceControlResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraListRequest> __Marshaller_CameraListRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraListRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraListResponse> __Marshaller_CameraListResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraListResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraConnectionRequest> __Marshaller_CameraConnectionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraConnectionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraConnectionResponse> __Marshaller_CameraConnectionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraConnectionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraParametersRequest> __Marshaller_CameraParametersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraParametersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraParametersResponse> __Marshaller_CameraParametersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraParametersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraAcquisitionRequest> __Marshaller_CameraAcquisitionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraAcquisitionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.CameraAcquisitionResponse> __Marshaller_CameraAcquisitionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.CameraAcquisitionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.BufferedFramesRequest> __Marshaller_BufferedFramesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.BufferedFramesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.BufferedFramesResponse> __Marshaller_BufferedFramesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.BufferedFramesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.TemperatureRequest> __Marshaller_TemperatureRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.TemperatureRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.TemperatureResponse> __Marshaller_TemperatureResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.TemperatureResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.ResetRequest> __Marshaller_ResetRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.ResetRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Services.ResetResponse> __Marshaller_ResetResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Services.ResetResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Services.VimbaInstanceControlRequest, global::Services.VimbaInstanceControlResponse> __Method_VimbaInstanceControl = new grpc::Method<global::Services.VimbaInstanceControlRequest, global::Services.VimbaInstanceControlResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VimbaInstanceControl",
        __Marshaller_VimbaInstanceControlRequest,
        __Marshaller_VimbaInstanceControlResponse);

    static readonly grpc::Method<global::Services.CameraListRequest, global::Services.CameraListResponse> __Method_RequestCameraList = new grpc::Method<global::Services.CameraListRequest, global::Services.CameraListResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestCameraList",
        __Marshaller_CameraListRequest,
        __Marshaller_CameraListResponse);

    static readonly grpc::Method<global::Services.CameraConnectionRequest, global::Services.CameraConnectionResponse> __Method_RequestCameraConnection = new grpc::Method<global::Services.CameraConnectionRequest, global::Services.CameraConnectionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestCameraConnection",
        __Marshaller_CameraConnectionRequest,
        __Marshaller_CameraConnectionResponse);

    static readonly grpc::Method<global::Services.CameraParametersRequest, global::Services.CameraParametersResponse> __Method_RequestCameraParameters = new grpc::Method<global::Services.CameraParametersRequest, global::Services.CameraParametersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestCameraParameters",
        __Marshaller_CameraParametersRequest,
        __Marshaller_CameraParametersResponse);

    static readonly grpc::Method<global::Services.CameraAcquisitionRequest, global::Services.CameraAcquisitionResponse> __Method_RequestCameraAcquisition = new grpc::Method<global::Services.CameraAcquisitionRequest, global::Services.CameraAcquisitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestCameraAcquisition",
        __Marshaller_CameraAcquisitionRequest,
        __Marshaller_CameraAcquisitionResponse);

    static readonly grpc::Method<global::Services.BufferedFramesRequest, global::Services.BufferedFramesResponse> __Method_RequestBufferedFrames = new grpc::Method<global::Services.BufferedFramesRequest, global::Services.BufferedFramesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestBufferedFrames",
        __Marshaller_BufferedFramesRequest,
        __Marshaller_BufferedFramesResponse);

    static readonly grpc::Method<global::Services.CameraAcquisitionRequest, global::Services.BufferedFramesResponse> __Method_RequestFrameStream = new grpc::Method<global::Services.CameraAcquisitionRequest, global::Services.BufferedFramesResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "RequestFrameStream",
        __Marshaller_CameraAcquisitionRequest,
        __Marshaller_BufferedFramesResponse);

    static readonly grpc::Method<global::Services.TemperatureRequest, global::Services.TemperatureResponse> __Method_RequestTemperature = new grpc::Method<global::Services.TemperatureRequest, global::Services.TemperatureResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestTemperature",
        __Marshaller_TemperatureRequest,
        __Marshaller_TemperatureResponse);

    static readonly grpc::Method<global::Services.ResetRequest, global::Services.ResetResponse> __Method_RequestReset = new grpc::Method<global::Services.ResetRequest, global::Services.ResetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestReset",
        __Marshaller_ResetRequest,
        __Marshaller_ResetResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Services.CameraServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VimbaCamera</summary>
    public abstract partial class VimbaCameraBase
    {
      /// <summary>
      /// Allocate or free the vimba instance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Services.VimbaInstanceControlResponse> VimbaInstanceControl(global::Services.VimbaInstanceControlRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Get the list of camera
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Services.CameraListResponse> RequestCameraList(global::Services.CameraListRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Control the connection to the camera by name
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Services.CameraConnectionResponse> RequestCameraConnection(global::Services.CameraConnectionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Read, write the parameters and prepare the frames
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Services.CameraParametersResponse> RequestCameraParameters(global::Services.CameraParametersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.CameraAcquisitionResponse> RequestCameraAcquisition(global::Services.CameraAcquisitionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.BufferedFramesResponse> RequestBufferedFrames(global::Services.BufferedFramesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// stream image transmission
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task RequestFrameStream(grpc::IAsyncStreamReader<global::Services.CameraAcquisitionRequest> requestStream, grpc::IServerStreamWriter<global::Services.BufferedFramesResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.TemperatureResponse> RequestTemperature(global::Services.TemperatureRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Services.ResetResponse> RequestReset(global::Services.ResetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VimbaCamera</summary>
    public partial class VimbaCameraClient : grpc::ClientBase<VimbaCameraClient>
    {
      /// <summary>Creates a new client for VimbaCamera</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VimbaCameraClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VimbaCamera that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VimbaCameraClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VimbaCameraClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VimbaCameraClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Allocate or free the vimba instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.VimbaInstanceControlResponse VimbaInstanceControl(global::Services.VimbaInstanceControlRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VimbaInstanceControl(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allocate or free the vimba instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.VimbaInstanceControlResponse VimbaInstanceControl(global::Services.VimbaInstanceControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VimbaInstanceControl, null, options, request);
      }
      /// <summary>
      /// Allocate or free the vimba instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.VimbaInstanceControlResponse> VimbaInstanceControlAsync(global::Services.VimbaInstanceControlRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VimbaInstanceControlAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Allocate or free the vimba instance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.VimbaInstanceControlResponse> VimbaInstanceControlAsync(global::Services.VimbaInstanceControlRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VimbaInstanceControl, null, options, request);
      }
      /// <summary>
      /// Get the list of camera
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.CameraListResponse RequestCameraList(global::Services.CameraListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the list of camera
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.CameraListResponse RequestCameraList(global::Services.CameraListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestCameraList, null, options, request);
      }
      /// <summary>
      /// Get the list of camera
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.CameraListResponse> RequestCameraListAsync(global::Services.CameraListRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get the list of camera
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.CameraListResponse> RequestCameraListAsync(global::Services.CameraListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestCameraList, null, options, request);
      }
      /// <summary>
      /// Control the connection to the camera by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.CameraConnectionResponse RequestCameraConnection(global::Services.CameraConnectionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraConnection(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Control the connection to the camera by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.CameraConnectionResponse RequestCameraConnection(global::Services.CameraConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestCameraConnection, null, options, request);
      }
      /// <summary>
      /// Control the connection to the camera by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.CameraConnectionResponse> RequestCameraConnectionAsync(global::Services.CameraConnectionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraConnectionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Control the connection to the camera by name
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.CameraConnectionResponse> RequestCameraConnectionAsync(global::Services.CameraConnectionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestCameraConnection, null, options, request);
      }
      /// <summary>
      /// Read, write the parameters and prepare the frames
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.CameraParametersResponse RequestCameraParameters(global::Services.CameraParametersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraParameters(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Read, write the parameters and prepare the frames
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Services.CameraParametersResponse RequestCameraParameters(global::Services.CameraParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestCameraParameters, null, options, request);
      }
      /// <summary>
      /// Read, write the parameters and prepare the frames
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.CameraParametersResponse> RequestCameraParametersAsync(global::Services.CameraParametersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraParametersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Read, write the parameters and prepare the frames
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Services.CameraParametersResponse> RequestCameraParametersAsync(global::Services.CameraParametersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestCameraParameters, null, options, request);
      }
      public virtual global::Services.CameraAcquisitionResponse RequestCameraAcquisition(global::Services.CameraAcquisitionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraAcquisition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.CameraAcquisitionResponse RequestCameraAcquisition(global::Services.CameraAcquisitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestCameraAcquisition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Services.CameraAcquisitionResponse> RequestCameraAcquisitionAsync(global::Services.CameraAcquisitionRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestCameraAcquisitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Services.CameraAcquisitionResponse> RequestCameraAcquisitionAsync(global::Services.CameraAcquisitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestCameraAcquisition, null, options, request);
      }
      public virtual global::Services.BufferedFramesResponse RequestBufferedFrames(global::Services.BufferedFramesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestBufferedFrames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.BufferedFramesResponse RequestBufferedFrames(global::Services.BufferedFramesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestBufferedFrames, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Services.BufferedFramesResponse> RequestBufferedFramesAsync(global::Services.BufferedFramesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestBufferedFramesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Services.BufferedFramesResponse> RequestBufferedFramesAsync(global::Services.BufferedFramesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestBufferedFrames, null, options, request);
      }
      /// <summary>
      /// stream image transmission
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Services.CameraAcquisitionRequest, global::Services.BufferedFramesResponse> RequestFrameStream(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestFrameStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// stream image transmission
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Services.CameraAcquisitionRequest, global::Services.BufferedFramesResponse> RequestFrameStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_RequestFrameStream, null, options);
      }
      public virtual global::Services.TemperatureResponse RequestTemperature(global::Services.TemperatureRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestTemperature(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.TemperatureResponse RequestTemperature(global::Services.TemperatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestTemperature, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Services.TemperatureResponse> RequestTemperatureAsync(global::Services.TemperatureRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestTemperatureAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Services.TemperatureResponse> RequestTemperatureAsync(global::Services.TemperatureRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestTemperature, null, options, request);
      }
      public virtual global::Services.ResetResponse RequestReset(global::Services.ResetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestReset(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Services.ResetResponse RequestReset(global::Services.ResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestReset, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Services.ResetResponse> RequestResetAsync(global::Services.ResetRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RequestResetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Services.ResetResponse> RequestResetAsync(global::Services.ResetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestReset, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VimbaCameraClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VimbaCameraClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VimbaCameraBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_VimbaInstanceControl, serviceImpl.VimbaInstanceControl)
          .AddMethod(__Method_RequestCameraList, serviceImpl.RequestCameraList)
          .AddMethod(__Method_RequestCameraConnection, serviceImpl.RequestCameraConnection)
          .AddMethod(__Method_RequestCameraParameters, serviceImpl.RequestCameraParameters)
          .AddMethod(__Method_RequestCameraAcquisition, serviceImpl.RequestCameraAcquisition)
          .AddMethod(__Method_RequestBufferedFrames, serviceImpl.RequestBufferedFrames)
          .AddMethod(__Method_RequestFrameStream, serviceImpl.RequestFrameStream)
          .AddMethod(__Method_RequestTemperature, serviceImpl.RequestTemperature)
          .AddMethod(__Method_RequestReset, serviceImpl.RequestReset).Build();
    }

  }
}
#endregion
